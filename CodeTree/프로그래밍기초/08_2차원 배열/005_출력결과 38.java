import java.io.*;
import java.util.*;
/**
 * 1. 문제정보
 *  - 제목 : 출력결과 38
 *  - 링크 : https://www.codetree.ai/missions/4/problems/reading-k201650/description
 * 2. 풀이핵심
 *  - 2차원 배열 입력
 * 3. 풀이후기
 *  - 간단한 문제 풀이
 */
int i, j, k, sum;
int[][] a = new int[3][3];
sum = 0;
a[0][0] = a[0][1] = 0; a[0][2] = 1;
a[1][1] = a[1][2] = 0; a[1][0] = 1;
a[2][0] = a[2][2] = 0; a[2][1] = 1;
for (k = 0; k < 3; k++) {
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            if (a[i][k] > 0 && a[k][j] > 0)
                a[i][j] = 1;
        }
    }
}
for (i = 0; i < 3; i++) {
    for (j = 0; j < 3; j++)
        sum += a[i][j];
}
System.out.println(sum);
// [ 0, 0, 1 ]
// [ 1, 0, 0 ]
// [ 0, 1, 0 ]
// k = 0, i = 0, j = 0  a[0][0] > 0 && a[0][0] > 0 => False
// k = 0, i = 0, j = 1  a[0][0] > 0 && a[0][1] > 0 => False
// k = 0, i = 0, j = 2  a[0][0] > 0 && a[0][2] > 0 => False
// k = 0, i = 1, j = 0  a[1][0] > 0 && a[0][0] > 0 => False
// k = 0, i = 1, j = 1  a[1][0] > 0 && a[0][1] > 0 => False
// k = 0, i = 1, j = 2  a[1][0] > 0 && a[0][2] > 0 => True  a[1][2] = 1
// [ 0, 0, 1 ]
// [ 1, 0, 1 ]
// [ 0, 1, 0 ]
// k = 0, i = 2, j = 0  a[2][0] > 0 && a[0][0] > 0 => False
// k = 0, i = 2, j = 1  a[2][0] > 0 && a[0][1] > 0 => False
// k = 0, i = 2, j = 2  a[2][0] > 0 && a[0][2] > 0 => False
// k = 1, i = 0, j = 0  a[0][1] > 0 && a[1][0] > 0 => False
// k = 1, i = 0, j = 1  a[0][1] > 0 && a[1][1] > 0 => False
// k = 1, i = 0, j = 2  a[0][1] > 0 && a[1][2] > 0 => False
// k = 1, i = 1, j = 0  a[1][1] > 0 && a[1][0] > 0 => False
// k = 1, i = 1, j = 1  a[1][1] > 0 && a[1][1] > 0 => False
// k = 1, i = 1, j = 2  a[1][1] > 0 && a[1][2] > 0 => False
// k = 1, i = 2, j = 0  a[2][1] > 0 && a[1][0] > 0 => True  a[2][0] = 1
// [ 0, 0, 1 ]
// [ 1, 0, 1 ]
// [ 1, 1, 0 ]
// k = 1, i = 2, j = 1  a[2][1] > 0 && a[1][1] > 0 => False
// k = 1, i = 2, j = 2  a[2][1] > 0 && a[1][2] > 0 => True  a[2][2] = 1
// [ 0, 0, 1 ]
// [ 1, 0, 1 ]
// [ 1, 1, 1 ]
// k = 2, i = 0, j = 0  a[0][2] > 0 && a[2][0] > 0 => True  a[0][0] = 1
// [ 1, 0, 1 ]
// [ 1, 0, 1 ]
// [ 1, 1, 1 ]
// k = 2, i = 0, j = 1  a[0][2] > 0 && a[2][1] > 0 => True  a[0][1] = 1
// [ 1, 1, 1 ]
// [ 1, 0, 1 ]
// [ 1, 1, 1 ]
// k = 2, i = 0, j = 2  a[0][2] > 0 && a[2][2] > 0 => True  a[0][2] = 1 (이미 1)
// k = 2, i = 1, j = 0  a[1][2] > 0 && a[2][0] > 0 => True  a[1][0] = 1 (이미 1)
// k = 2, i = 1, j = 1  a[1][2] > 0 && a[2][1] > 0 => True  a[1][1] = 1
// [ 1, 1, 1 ]
// [ 1, 1, 1 ]
// [ 1, 1, 1 ]
// 이후로 어떤 조합이건 항상 True이지만, 이미 모두 1이기에 총 크기 만큼의 결과
// k = 2, i = 1, j = 2  a[1][2] > 0 && a[2][2] > 0
// k = 2, i = 2, j = 0  a[2][2] > 0 && a[2][0] > 0
// k = 2, i = 2, j = 1  a[2][2] > 0 && a[2][1] > 0
// k = 2, i = 2, j = 2  a[2][2] > 0 && a[2][2] > 0
// = 9